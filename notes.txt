
Ideas for dirmi:

- Bidirectional
- Operates on a single InputStream and OutputStream pair
- Uses @Remote annotation on interface, method (return value), or parameter.
- Byte and character streams supported
- Custom annotation describes how other kinds of streams can be connected
- How about custom annotation which can describe how anything is relayed?
  Can @Remote be defined this way? @Stream?
- Custom annotation handler is just given a raw stream to play with. Default
  annotation is @Object, which creates a new Object stream.
- Perhaps session ID is passed to handler too? To keep things separate?
- Can use @Asynchronous annotation for methods that return void and declare no exceptions.

- Define @Idempotent annotation for method. If connection restored, this method
  can be re-executed automatically. When connection lost, remote objects might
  lose their lease and get collected. If remote object was obtained via an
  @Idempotent method, then remote object can be obtained again. To support
  this, the remote object needs to remember what object, method, and parameters
  were invoked to get itself. The root remote object is implicitly idempotent,
  and it can be restored without calling an @Idempotent method. If remote
  object was not obtained from an @Idempotent method (or it is not the root)
  then it cannot be restored and an exception must be thrown.

- Define some mechanism to "dispose" a remote object rather than relying on
  exclusively on garbage collection. Server side objects can implement
  Unreferenced in standard RMI be notified when all clients are no longer using
  an object. How can dispose be worked in? A method in DisposableRemote? The
  server-side implementation will have to implement this method too, but with
  what? Leave it empty?
